// Edge cases test schema with complex scenarios
generator client {
  provider = "prisma-client-js"
}

generator trpc {
  provider                 = "node ../../lib/generator.js"
  output                   = "../generated/edge-cases"
  contextPath              = "../test-context"
  withZod                  = true
  withShield               = false
  isGenerateSelect         = false
  isGenerateInclude        = false
  showModelNameInProcedure = false
  generateModelActions     = "findFirst,findMany,create,update,delete"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://test:test@localhost:5432/test"
}

/// @@Gen.model(hide: true)
model HiddenModel {
  id   Int    @id @default(autoincrement())
  name String
}

model ModelWithVeryLongNameThatShouldTestNamingConventions {
  id                                        Int    @id @default(autoincrement())
  fieldWithVeryLongNameThatTestsLimitations String
  
  @@map("long_name_model")
}

model SelfReferencing {
  id       Int               @id @default(autoincrement())
  name     String
  parentId Int?
  parent   SelfReferencing?  @relation("SelfRef", fields: [parentId], references: [id])
  children SelfReferencing[] @relation("SelfRef")
}

model CircularA {
  id  Int        @id @default(autoincrement())
  bId Int?       @unique
  b   CircularB? @relation(fields: [bId], references: [id])
}

model CircularB {
  id  Int       @id @default(autoincrement())
  a   CircularA?
}

model ModelWithAllFieldTypes {
  id             Int       @id @default(autoincrement())
  
  // String types
  string         String
  stringOptional String?
  stringArray    String[]
  
  // Number types
  int            Int
  intOptional    Int?
  bigInt         BigInt
  bigIntOptional BigInt?
  float          Float
  floatOptional  Float?
  decimal        Decimal
  decimalOptional Decimal?
  
  // Boolean
  boolean        Boolean
  booleanOptional Boolean?
  
  // DateTime
  dateTime       DateTime
  dateTimeOptional DateTime?
  
  // JSON
  json           Json
  jsonOptional   Json?
  
  // Bytes
  bytes          Bytes
  bytesOptional  Bytes?
  
  // Special fields
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  uuid           String   @default(uuid())
  
  @@map("all_field_types")
}

model ModelWithUniqueConstraints {
  id           Int    @id @default(autoincrement())
  email        String @unique
  username     String @unique
  slug         String
  categorySlug String
  
  @@unique([slug, categorySlug])
  @@map("unique_constraints")
}

model ModelWithComplexIndexes {
  id        Int      @id @default(autoincrement())
  field1    String
  field2    Int
  field3    DateTime
  field4    Boolean
  field5    String?
  
  @@index([field1])
  @@index([field1, field2])
  @@index([field1, field2, field3])
  @@index([field4, field1])
  @@index([field3(sort: Desc)])
  @@map("complex_indexes")
}

enum LargeEnum {
  VALUE_ONE
  VALUE_TWO
  VALUE_THREE
  VALUE_FOUR
  VALUE_FIVE
  VALUE_SIX
  VALUE_SEVEN
  VALUE_EIGHT
  VALUE_NINE
  VALUE_TEN
}

model ModelWithEnums {
  id        Int       @id @default(autoincrement())
  status    LargeEnum @default(VALUE_ONE)
  statuses  LargeEnum[]
  
  @@map("model_with_enums")
}

model ModelWithSpecialCharacters {
  id                Int    @id @default(autoincrement())
  field_with_snake  String
  fieldWithCamel    String
  field123          String
  field_with_123    String
  
  @@map("special_chars")
}

model ManyToManyLeft {
  id      Int                      @id @default(autoincrement())
  name    String
  rights  ManyToManyConnection[]
  
  @@map("m2m_left")
}

model ManyToManyRight {
  id     Int                      @id @default(autoincrement())
  name   String
  lefts  ManyToManyConnection[]
  
  @@map("m2m_right")
}

model ManyToManyConnection {
  leftId  Int
  rightId Int
  data    String?
  left    ManyToManyLeft  @relation(fields: [leftId], references: [id])
  right   ManyToManyRight @relation(fields: [rightId], references: [id])
  
  @@id([leftId, rightId])
  @@map("m2m_connection")
}

model ModelWithCascade {
  id       Int                     @id @default(autoincrement())
  name     String
  children ModelWithCascadeChild[]
}

model ModelWithCascadeChild {
  id       Int              @id @default(autoincrement())
  name     String
  parentId Int
  parent   ModelWithCascade @relation(fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
  @@map("cascade_child")
}